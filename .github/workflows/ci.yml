name: CI/CD Pipeline

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master]
  schedule:
    # Run every Sunday at 00:00 UTC for model updates
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  # Quick migration check - runs in parallel with other jobs
  check-migrations:
    name: Check for Migrations
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    outputs:
      has-migrations: ${{ steps.check.outputs.has-migrations }}
      migration-files: ${{ steps.check.outputs.migration-files }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for new migrations
        id: check
        run: |
          # Check if any migration files have changed
          MIGRATION_CHANGES=$(git diff --name-only HEAD~1 HEAD -- migrations/*.sql || true)

          if [ -n "$MIGRATION_CHANGES" ]; then
            echo "has-migrations=true" >> $GITHUB_OUTPUT
            echo "migration-files<<EOF" >> $GITHUB_OUTPUT
            echo "$MIGRATION_CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "üìã Found migration changes:"
            echo "$MIGRATION_CHANGES"
          else
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No migration changes detected"
          fi

  # Update AI Models - runs in parallel with test
  update-models:
    name: Update AI Models
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: scripts/go.mod

      - name: Fetch AI models
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          cd scripts
          go run fetch-models.go

      - name: Check if models changed
        id: check_changes
        run: |
          cp scripts/available-models.json scripts/available-models-new.json
          git checkout HEAD -- scripts/available-models.json

          cd scripts
          go run compare-models.go available-models.json available-models-new.json
          if [ $? -eq 0 ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            mv available-models-new.json available-models.json
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            mv available-models-new.json available-models.json
          fi

      - name: Commit and push if changed
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add scripts/available-models.json
          git commit -m "chore: update AI models list [skip ci]"
          git push

  # Build and test - runs in parallel with update-models
  build-and-test:
    name: Build & Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    strategy:
      matrix:
        # Only run matrix on PRs, single version for push
        node-version: ${{ github.event_name == 'pull_request' && fromJSON('["18.x", "20.x"]') || fromJSON('["20.x"]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run checks in parallel
        run: |
          # Run typecheck, lint, and test in parallel
          npm run typecheck &
          TYPECHECK_PID=$!

          npm run lint &
          LINT_PID=$!

          npm test || echo "No tests found" &
          TEST_PID=$!

          # Wait for all processes and check their exit codes
          wait $TYPECHECK_PID
          TYPECHECK_EXIT=$?

          wait $LINT_PID
          LINT_EXIT=$?

          wait $TEST_PID
          TEST_EXIT=$?

          # Exit with error if any check failed
          if [ $TYPECHECK_EXIT -ne 0 ] || [ $LINT_EXIT -ne 0 ] || [ $TEST_EXIT -ne 0 ]; then
            echo "One or more checks failed"
            exit 1
          fi

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Build for Cloudflare Pages
        # Only build for CF on main/master push
        if: |
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
          matrix.node-version == '20.x'
        run: npm run pages:build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Upload build artifacts
        # Only upload from Node 20.x to avoid duplicates
        if: |
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
          matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .vercel/output/static/
          retention-days: 1

  # Deploy job - uses artifacts from build
  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [build-and-test, check-migrations]
    if: |
      always() &&
      needs.build-and-test.result == 'success' &&
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            migrations
            scripts
          sparse-checkout-cone-mode: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup Node.js (minimal)
        if: needs.check-migrations.outputs.has-migrations == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install wrangler only
        if: needs.check-migrations.outputs.has-migrations == 'true'
        run: npm install -g wrangler@latest

      - name: Apply D1 Migrations
        if: needs.check-migrations.outputs.has-migrations == 'true'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîÑ Checking D1 migration setup..."

          if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "‚ö†Ô∏è  Cloudflare credentials not configured. Skipping D1 migrations."
            echo "To enable automatic migrations, add CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID secrets."
            echo "üìã Migrations to apply manually:"
            cat <<EOF
          ${{ needs.check-migrations.outputs.migration-files }}
          EOF
            exit 0
          fi

          echo "üîÑ Applying D1 migrations..."

          # Quick permission check
          if ! wrangler d1 list --json > /dev/null 2>&1; then
            echo "‚ùå API token authentication failed. Please check permissions."
            echo "üìã Migrations to apply manually:"
            cat <<EOF
          ${{ needs.check-migrations.outputs.migration-files }}
          EOF
            exit 0
          fi

          # Apply only the changed migrations
          for migration in ${{ needs.check-migrations.outputs.migration-files }}; do
            if [ -f "$migration" ]; then
              echo "Applying $(basename $migration)..."
              wrangler d1 execute omnichat-db --remote --file "$migration" 2>&1 || echo "‚ö†Ô∏è  Failed (may already be applied)"
            fi
          done

      - name: Deploy to Cloudflare Pages
        if: |
          env.CLOUDFLARE_API_TOKEN != '' && 
          env.CLOUDFLARE_ACCOUNT_ID != ''
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: omnichat
          directory: .vercel/output/static
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: 4
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Status
        if: |
          env.CLOUDFLARE_API_TOKEN == '' || 
          env.CLOUDFLARE_ACCOUNT_ID == ''
        run: |
          echo "Deployment skipped: Missing Cloudflare credentials"
          echo "The build was successful and is ready for deployment"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # Status check job - provides single status for branch protection
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "Build and test failed"
            exit 1
          fi
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ needs.deploy.result }}" != "success" ] && [ "${{ needs.deploy.result }}" != "skipped" ]; then
            echo "Deploy failed"
            exit 1
          fi
          echo "CI passed successfully"
