name: CI/CD Pipeline

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master]
  schedule:
    # Run every Sunday at 00:00 UTC for model updates
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  # Update AI Models (runs first if on master/main push)
  update-models:
    name: Update AI Models
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'

    permissions:
      contents: write # This gives permission to push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch full history for pushing

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Fetch AI models
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          cd scripts
          go run fetch-models.go

      - name: Check if models changed
        id: check_changes
        run: |
          # Save the current version
          cp scripts/available-models.json scripts/available-models-new.json

          # Get the previous version from git
          git checkout HEAD -- scripts/available-models.json

          # Compare models ignoring timestamps
          cd scripts
          go run compare-models.go available-models.json available-models-new.json
          if [ $? -eq 0 ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            # Restore the new version without committing
            mv available-models-new.json available-models.json
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            # Use the new version with updated models
            mv available-models-new.json available-models.json
          fi

      - name: Commit and push if changed
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add scripts/available-models.json
          git commit -m "chore: update AI models list [skip ci]"
          git push

  # Test job - runs tests and linting
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [update-models]
    if: always() && !contains(github.event.head_commit.message, '[skip ci]')

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Pull latest changes if models were updated
          fetch-depth: 0

      - name: Pull latest changes
        if: needs.update-models.result == 'success'
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test || echo "No tests found"

      - name: Build
        run: npm run build

  # Check for migrations
  check-migrations:
    name: Check for Migrations
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      always() &&
      needs.test.result == 'success' &&
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    outputs:
      has-migrations: ${{ steps.check.outputs.has-migrations }}
      migration-files: ${{ steps.check.outputs.migration-files }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for new migrations
        id: check
        run: |
          # Check if any migration files have changed
          MIGRATION_CHANGES=$(git diff --name-only HEAD~1 HEAD -- migrations/*.sql || true)

          if [ -n "$MIGRATION_CHANGES" ]; then
            echo "has-migrations=true" >> $GITHUB_OUTPUT
            echo "migration-files<<EOF" >> $GITHUB_OUTPUT
            echo "$MIGRATION_CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "üìã Found migration changes:"
            echo "$MIGRATION_CHANGES"
          else
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No migration changes detected"
          fi

  # Deploy job - deploys to Cloudflare Pages with migrations
  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [test, check-migrations]
    if: |
      always() &&
      needs.test.result == 'success' &&
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    permissions:
      contents: read
      deployments: write # Required for Cloudflare Pages deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Pull latest changes if models were updated
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Apply D1 Migrations
        if: needs.check-migrations.outputs.has-migrations == 'true'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          D1_DATABASE_ID: ${{ secrets.D1_DATABASE_ID }}
        run: |
          echo "üîÑ Checking D1 migration setup..."

          # Check if Cloudflare credentials are available
          if [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "‚ö†Ô∏è  Cloudflare credentials not configured. Skipping D1 migrations."
            echo ""
            echo "To enable automatic migrations in CI, add these secrets to your GitHub repository:"
            echo "1. CLOUDFLARE_API_TOKEN - Create at https://dash.cloudflare.com/profile/api-tokens"
            echo "2. CLOUDFLARE_ACCOUNT_ID - Found in your Cloudflare dashboard"
            echo ""
            echo "Required API token permissions:"
            echo "- Account: D1:Edit"
            echo "- Account: Cloudflare Pages:Edit (for deployment)"
            echo ""
            echo "üìã Migrations that need to be applied manually:"
            cat <<EOF
          ${{ needs.check-migrations.outputs.migration-files }}
          EOF
            exit 0
          fi

          echo "üîÑ Applying D1 migrations..."

          # Test API token permissions first
          if ! npx wrangler d1 list --json > /dev/null 2>&1; then
            echo "‚ùå API token authentication failed!"
            echo ""
            echo "Please ensure your CLOUDFLARE_API_TOKEN has these permissions:"
            echo "- Account: D1:Edit"
            echo ""
            echo "Create a new token at: https://dash.cloudflare.com/profile/api-tokens"
            echo ""
            echo "üìã Migrations that need to be applied manually:"
            cat <<EOF
          ${{ needs.check-migrations.outputs.migration-files }}
          EOF
            exit 0
          fi

          # Apply migrations
          MIGRATION_FAILED=false
          for migration in migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying $(basename $migration)..."
              if ! npx wrangler d1 execute omnichat-db --remote --file "$migration" 2>&1; then
                echo "‚ö†Ô∏è  Failed to apply $(basename $migration)"
                MIGRATION_FAILED=true
              fi
            fi
          done

          if [ "$MIGRATION_FAILED" = true ]; then
            echo ""
            echo "‚ö†Ô∏è  Some migrations failed. This might be because:"
            echo "1. They were already applied"
            echo "2. API token lacks D1:Edit permission"
            echo "3. Database doesn't exist in your account"
            echo ""
            echo "Continuing with deployment..."
          fi

          # Run data migrations if needed
          if [ -f "./scripts/migrate-d1-data.sh" ]; then
            echo "üìä Running data migration script..."
            ./scripts/migrate-d1-data.sh || echo "‚ö†Ô∏è  Data migration script failed (non-critical)"
          fi

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Build for Cloudflare Pages
        run: |
          npm run pages:build
          ls -la .vercel/output/static/
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Deploy to Cloudflare Pages
        if: |
          env.CLOUDFLARE_API_TOKEN != '' && 
          env.CLOUDFLARE_ACCOUNT_ID != ''
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: omnichat
          directory: .vercel/output/static
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Status
        if: |
          env.CLOUDFLARE_API_TOKEN == '' || 
          env.CLOUDFLARE_ACCOUNT_ID == ''
        run: |
          echo "Deployment skipped: Missing Cloudflare credentials"
          echo "The build was successful and is ready for deployment"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment on Migration
        if: needs.check-migrations.outputs.has-migrations == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const migrationFiles = `${{ needs.check-migrations.outputs.migration-files }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üöÄ Deployment completed with migrations!\n\nApplied migrations:\n\`\`\`\n${migrationFiles}\n\`\`\`\n\nUsers may need to refresh their browser if they experience issues.`
            });
