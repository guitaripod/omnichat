// This file is auto-generated by scripts/fetch-models.go
// It imports the models JSON at build time

import modelsData from '../../../scripts/available-models.json';
import { AIModel as ServiceAIModel, AIProvider } from '@/services/ai/types';

export interface APIModel {
  id: string;
  object: string;
  created: number;
  owned_by: string;
  provider: string;
}

export interface AvailableModels {
  xai: APIModel[];
  openai: APIModel[];
  anthropic: APIModel[];
  google: APIModel[];
  updatedAt: string;
}

// Export the models data with proper typing
export const availableModels: AvailableModels = modelsData;

// Convert from API format to AIModel format
const convertToAIModel = (model: APIModel, provider: string): ServiceAIModel => {
  // Map model IDs to known model configurations
  const modelConfigs: Record<string, Partial<ServiceAIModel>> = {
    // XAI models
    'grok-3-beta': {
      name: 'Grok 3 Beta',
      contextWindow: 131072,
      maxOutput: 4096,
      supportsVision: false,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Latest Grok model with advanced reasoning',
    },
    'grok-3-fast-beta': {
      name: 'Grok 3 Fast Beta',
      contextWindow: 131072,
      maxOutput: 4096,
      supportsVision: false,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Faster variant of Grok 3',
    },
    'grok-3-mini-beta': {
      name: 'Grok 3 Mini Beta',
      contextWindow: 65536,
      maxOutput: 4096,
      supportsVision: false,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Smaller, efficient Grok 3 model',
    },
    'grok-3-mini-fast-beta': {
      name: 'Grok 3 Mini Fast Beta',
      contextWindow: 65536,
      maxOutput: 4096,
      supportsVision: false,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Fastest Grok 3 variant',
    },
    'grok-2-image-1212': {
      name: 'Grok 2 Image',
      contextWindow: 32768,
      maxOutput: 4096,
      supportsVision: true,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Multimodal Grok with image understanding',
    },
    'grok-2-1212': {
      name: 'Grok 2',
      contextWindow: 131072,
      maxOutput: 4096,
      supportsVision: false,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Previous generation Grok model',
    },
    'grok-2-vision-1212': {
      name: 'Grok 2 Vision',
      contextWindow: 32768,
      maxOutput: 4096,
      supportsVision: true,
      supportsTools: true,
      supportsWebSearch: false,
      description: 'Grok 2 with vision capabilities',
    },
    // Add more model mappings as needed
  };

  const config = modelConfigs[model.id] || {
    name: model.id,
    contextWindow: 128000,
    maxOutput: 4096,
    supportsVision: false,
    supportsTools: false,
    supportsWebSearch: false,
  };

  return {
    id: model.id,
    provider: (model.provider || provider) as AIProvider,
    ...config,
  } as ServiceAIModel;
};

// Helper functions to get models by provider
export const getXAIModels = () =>
  (availableModels.xai || []).map((m) => convertToAIModel(m, 'xai'));
export const getOpenAIModels = () =>
  (availableModels.openai || []).map((m) => convertToAIModel(m, 'openai'));
export const getAnthropicModels = () =>
  (availableModels.anthropic || []).map((m) => convertToAIModel(m, 'anthropic'));
export const getGoogleModels = () =>
  (availableModels.google || []).map((m) => convertToAIModel(m, 'google'));

// Get all models as a flat array
export const getAllModels = (): ServiceAIModel[] => {
  return [...getXAIModels(), ...getOpenAIModels(), ...getAnthropicModels(), ...getGoogleModels()];
};

// Get model by ID
export const getModelById = (id: string): ServiceAIModel | undefined => {
  return getAllModels().find((model) => model.id === id);
};
