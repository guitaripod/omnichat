name: CI/CD Pipeline

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master]
  schedule:
    # Run every Sunday at 00:00 UTC for model updates
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  # Update AI Models (runs first if on master/main push)
  update-models:
    name: Update AI Models
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'

    permissions:
      contents: write # This gives permission to push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch full history for pushing

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Fetch AI models
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          cd scripts
          go run fetch-models.go

      - name: Check if models changed
        id: check_changes
        run: |
          if git diff --quiet scripts/available-models.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changed
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add scripts/available-models.json
          git commit -m "chore: update AI models list [skip ci]"
          git push

  # Test job - runs tests and linting
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [update-models]
    if: always() && !contains(github.event.head_commit.message, '[skip ci]')

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Pull latest changes if models were updated
          fetch-depth: 0

      - name: Pull latest changes
        if: needs.update-models.result == 'success'
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test || echo "No tests found"

      - name: Build
        run: npm run build

  # Deploy job - deploys to Cloudflare Pages
  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      always() &&
      needs.test.result == 'success' &&
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Pull latest changes if models were updated
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Build for Cloudflare Pages
        run: |
          npm run pages:build
          ls -la .vercel/output/static/
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Deploy to Cloudflare Pages
        if: |
          env.CLOUDFLARE_API_TOKEN != '' && 
          env.CLOUDFLARE_ACCOUNT_ID != ''
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: omnichat
          directory: .vercel/output/static
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Status
        if: |
          env.CLOUDFLARE_API_TOKEN == '' || 
          env.CLOUDFLARE_ACCOUNT_ID == ''
        run: |
          echo "Deployment skipped: Missing Cloudflare credentials"
          echo "The build was successful and is ready for deployment"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
